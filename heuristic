import sys

class TSP:
    def __init__(self, num_cities):
        self.num_cities = num_cities
        self.adj_matrix = [[0] * num_cities for _ in range(num_cities)]

    def add_edge(self, city1, city2, distance):
        self.adj_matrix[city1][city2] = distance
        self.adj_matrix[city2][city1] = distance

    def nearest_neighbor(self):
        visited = [False] * self.num_cities
        tour = []
        current_city = 0

        for _ in range(self.num_cities - 1):
            visited[current_city] = True
            tour.append(current_city)
            next_city = self.find_nearest_neighbor(current_city, visited)
            current_city = next_city

        tour.append(0)
        return tour

    def find_nearest_neighbor(self, city, visited):
        nearest_city = None
        min_distance = sys.maxsize

        for neighbor in range(self.num_cities):
            if not visited[neighbor] and self.adj_matrix[city][neighbor] < min_distance:
                nearest_city = neighbor
                min_distance = self.adj_matrix[city][neighbor]

        return nearest_city

    def calculate_tour_length(self, tour):
        tour_length = 0
        for i in range(len(tour) - 1):
            city1 = tour[i]
            city2 = tour[i + 1]
            tour_length += self.adj_matrix[city1][city2]
        return tour_length


if __name__ == "__main__":
    num_cities = 5
    tsp = TSP(num_cities)

    tsp.add_edge(0, 1, 10)
    tsp.add_edge(0, 2, 15)
    tsp.add_edge(0, 3, 20)
    tsp.add_edge(0, 4, 25)
    tsp.add_edge(1, 2, 35)
    tsp.add_edge(1, 3, 45)
    tsp.add_edge(1, 4, 55)
    tsp.add_edge(2, 3, 65)
    tsp.add_edge(2, 4, 75)
    tsp.add_edge(3, 4, 85)

    tour = tsp.nearest_neighbor()
    tour_length = tsp.calculate_tour_length(tour)

    print("Tour:", tour)
    print("Tour Length:", tour_length)
  
